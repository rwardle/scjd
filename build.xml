<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="scjdAssignment" default="default" basedir="." xmlns:macro="macro">
    <description>Builds, tests, and runs the project scjdAssignment.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--
    ======================
    INITIALIZATION SECTION
    ======================
    -->
    <target name="-post-init">
        <property file="build.properties"/>
    </target>
    <!--
    ==================
    CHECKSTYLE SECTION
    ==================
    -->
    <taskdef classpath="/mnt/data/software/checkstyle/checkstyle-all.jar:/mnt/data/software/checkstyle/checkstyle-optional.jar"
                resource="checkstyletask.properties"/>
    <macrodef name="checkstyle" uri="macro">
        <attribute name="failOnViolation" default="true"/>
        <attribute name="includes" default="**/*.java"/>
        <element name="customize" optional="true"/>
        <sequential>
            <checkstyle config="${checkstyle.checks.file}"
                    failOnViolation="@{failOnViolation}">
                <classpath>
                    <path path="${run.test.classpath}"/>
                </classpath>
                <fileset dir="${src.dir}" includes="@{includes}"/>
                <fileset dir="${test.src.dir}" includes="@{includes}"/>
                <customize/>
            </checkstyle>
        </sequential>
    </macrodef>
    <target name="checkstyle" depends="init">
        <macro:checkstyle>
            <customize>
                <formatter type="plain"/>
            </customize>
        </macro:checkstyle>
    </target>
    <target name="checkstyle-single" depends="init">
        <macro:checkstyle includes="${checkstyle.includes}">
            <customize>
                <formatter type="plain"/>
            </customize>
        </macro:checkstyle>
    </target>
    <target name="cruise-checkstyle" depends="init">
        <macro:checkstyle failOnViolation="false">
            <customize>
                <formatter type="xml" toFile="${checkstyle.errors.file}"/>
            </customize>
        </macro:checkstyle>
    </target>
    <!--
    =================
    COBERTURA SECTION
    =================
    -->
    <taskdef classpath="/mnt/data/software/cobertura/cobertura.jar"
                resource="tasks.properties"/>
    <target name="coverage-instrument" depends="compile">
        <mkdir dir="${build.coverage.classes.dir}"/>
        <cobertura-instrument todir="${build.coverage.classes.dir}">
            <fileset dir="${build.classes.dir}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
    </target>
    <target name="coverage-test" depends="compile-test,coverage-instrument">
        <junit fork="true" dir="${basedir}" jvm="${platform.java}">
            <batchtest todir="${build.test.results.dir}">
                <fileset dir="${test.src.dir}"/>
            </batchtest>
            <classpath>
                <path path="${cobertura.jar}"/>
                <path path="${build.coverage.classes.dir}"/>
                <path path="${run.test.classpath}"/>
            </classpath>
        </junit>
    </target>
    <target name="coverage-report" depends="coverage-test">
        <cobertura-report srcdir="${src.dir}" destdir="${build.coverage.report.dir}"/>
    </target>
    <!--
    ================
    FITNESSE SECTION
    ================
    -->
    <target name="fitnesse" depends="compile,compile-test">
        <java fork="true" classname="fitnesse.runner.TestRunner"
                dir="${work.dir}" failonerror="false"
                resultproperty="java.result">
            <arg line="localhost 8091 ScjdAssignment.AcceptanceTests.SuiteScjdAssignment${fitnesse.filter} -v"/>
            <arg line="-results stdout -html ${fitnesse.report.file} -nopath"/>
            <classpath>
                <path path="${run.test.classpath}"/>
            </classpath>
        </java>
        <condition property="tests.failed">
            <and>
                <not>
                    <equals arg1="${java.result}" arg2="0"/>
                </not>
                <not>
                    <equals arg1="${java.result}" arg2="-1"/>
                </not>
            </and>
        </condition>
        <fail message="Acceptance tests failed. Check test reports." if="tests.failed"/>
    </target>
    <!--
    =====================
    CRUISECONTROL SECTION
    =====================
    -->
    <target name="cruise-test" depends="compile-test,-pre-test-run">
        <junit showoutput="true" fork="true" dir="${basedir}"
                failureproperty="tests.failed" errorproperty="tests.failed"
                jvm="${platform.java}">
            <batchtest todir="${build.test.results.dir}">
                <fileset dir="${test.src.dir}"/>
            </batchtest>
            <classpath>
                <path path="${run.test.classpath}"/>
            </classpath>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
        </junit>
        <fail message="Tests failed. Check test reports." if="tests.failed"/>
    </target>
    <target name="cruise-build"
            depends="clean,jar,cruise-test,fitnesse,cruise-checkstyle,coverage-report,javadoc"/>
</project>
